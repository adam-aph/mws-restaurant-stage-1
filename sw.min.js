var name="restaurants-simple-cache-v2",filesToCache=["./","./index.html","./restaurant.html","./sw.min.js","./dest/styles.css","./dest/main.js","./dest/restaurant_info.js"];function servePhoto(e){var t=e.url.replace(/-\d+px\.jpg$/,"");return caches.open(name).then(function(n){return n.match(t).then(function(o){return o||fetch(e).then(function(e){return n.put(t,e.clone()),e}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})})}self.addEventListener("install",function(e){e.waitUntil(openDatabase().then(function(){}).catch(function(e){console.log(e)})),e.waitUntil(caches.open(name).then(function(e){return e.addAll(filesToCache)}).catch(function(e){console.log(e)}))}),self.addEventListener("activate",function(e){self.clients.matchAll({includeUncontrolled:!0}).then(function(e){var t=e.map(function(e){return e.url});console.log("[ServiceWorker] Matching clients:",t.join(", "))}),e.waitUntil(caches.keys().then(function(e){return Promise.all(e.filter(function(e){return e.startsWith("restaurants-")}).map(function(e){return caches.delete(e)}))}).then(function(){return self.clients.claim()}).catch(function(e){console.log(e)}))}),self.addEventListener("fetch",function(e){if("GET"==e.request.method&&("only-if-cached"!==e.request.cache||"same-origin"===e.request.mode)){var t=new URL(e.request.url);if(t.origin===location.origin&&t.pathname.startsWith("/img"))e.respondWith(servePhoto(e.request));else if(-1==t.origin.indexOf("localhost:1337"))e.respondWith(caches.open(name).then(function(t){return t.match(e.request).then(function(n){return n||fetch(e.request).then(function(n){return t.put(e.request,n.clone()),n}).catch(function(e){console.log(e)})})}).catch(function(e){console.log(e)}));else{var n=t.href;e.respondWith(fetch(e.request).then(function(e){return putDBCachedMessage(n,e.clone()),e}).catch(function(e){return getDBCachedMessage(n).then(function(e){return e}).catch(function(e){return e})}))}}});const syncStore={};self.addEventListener("message",e=>{if("review"===e.data.type||"favorite"===e.data.type){const t=e.data.uuid;syncStore[t]=e,self.registration.sync.register(t)}}),self.addEventListener("sync",e=>{const t=syncStore[e.tag];console.log("=== Syncing ==="),console.log("===   url: "+t.data.url),console.log("===   options: "+JSON.stringify(t.data.options)),e.waitUntil(fetch(t.data.url,t.data.options).then(function(e){return e.json()}).then(function(e){e.type=t.data.type,t.ports[0].postMessage(e)}).catch(function(e){console.error(e)}))});var idbDatabase,dbName="restaurants-simple-idb",objStoreName="mws-restaurant-calls";function openDatabase(){var e=indexedDB.open(dbName,1);return new Promise((t,n)=>{e.onupgradeneeded=function(){this.result.createObjectStore(objStoreName,{keyPath:"url"})},e.onsuccess=function(){idbDatabase=this.result,t()},e.onerror=function(e){console.error("IndexedDB error:",e),n()}})}function getObjectStore(){return idbDatabase.transaction(objStoreName,"readwrite").objectStore(objStoreName)}function getDBCachedMessage(e){var t=getObjectStore().get(e);return new Promise((e,n)=>{t.onsuccess=function(t){var n=t.target.result;e(null!=n?new Response(JSON.stringify(n.data),{headers:{"content-type":"application/json"}}):null)},t.onerror=function(e){n(null)}})}function putDBCachedMessage(e,t){t.json().then(function(t){getObjectStore().put({url:e,data:t})})}